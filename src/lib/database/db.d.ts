/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type AccountStatusEnum = "active" | "blocked" | "deactive" | "new";

export type CustomerStatusEnum = "active" | "blocked" | "deactive" | "new";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type NamespaceStatusEnum = "active" | "blocked" | "deactive" | "new";

export type PaymentOrderStatusEnum = "cancelled" | "confirmed" | "created" | "pending";

export type Status = "active" | "blocked" | "deactive" | "new";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type TransactionStatus = "cancelled" | "confirmed" | "pending";

export type TransactionStatusEnum = "cancelled" | "confirmed" | "created" | "pending";

export type TransactionType = "bonus" | "cashback" | "deposit" | "mint" | "payment" | "refund" | "transfer" | "withdraw";

export type TransactionTypeEnum = "bonus" | "cashback" | "deposit" | "mint" | "payment" | "refund" | "transfer" | "withdraw";

export type UserStatusEnum = "active" | "blocked" | "deactive" | "new";

export interface AccessToken {
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  idNamespace: string;
  idUser: string;
  key: string;
  secret: string;
  updatedAt: Generated<Timestamp>;
}

export interface AccessToken2 {
  createdAt: Generated<Timestamp>;
  createdById: string | null;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  key: string;
  namespaceId: string | null;
  secret: string;
  updatedAt: Generated<Timestamp>;
}

export interface Account {
  accessToken: string | null;
  expiresAt: Int8 | null;
  id: Generated<string>;
  idToken: string | null;
  provider: string;
  providerAccountId: string;
  refreshToken: string | null;
  scope: string | null;
  sessionState: string | null;
  tokenType: string | null;
  type: string;
  userId: string;
}

export interface Account2 {
  accountCode: string;
  accountKey: string;
  balance: Generated<number>;
  createdAt: Generated<Timestamp>;
  customerId: string | null;
  deteledAt: Timestamp | null;
  id: Generated<string>;
  namespaceCode: string;
  status: Generated<AccountStatusEnum>;
  updatedAt: Generated<Timestamp>;
}

export interface Customer {
  birthday: Timestamp;
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  name: string;
  status: Generated<Status>;
  updatedAt: Generated<Timestamp>;
}

export interface Customer2 {
  birthdate: Timestamp;
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  name: string;
  password: string;
  status: Generated<CustomerStatusEnum>;
  updatedAt: Generated<Timestamp>;
}

export interface Namespace {
  code: string;
  createdAt: Generated<Timestamp>;
  createdBy: string;
  id: Generated<string>;
  name: string;
  pic: string | null;
  status: Generated<Status>;
  updatedAt: Generated<Timestamp>;
}

export interface Namespace2 {
  code: string;
  createdAt: Generated<Timestamp>;
  createdById: string | null;
  id: Generated<string>;
  name: string;
  pic: string;
  status: Generated<NamespaceStatusEnum>;
  updatedAt: Generated<Timestamp>;
}

export interface NamespaceAccount {
  accountKey: string;
  accountNumber: string;
  accountPassword: string | null;
  balance: Generated<number>;
  balanceExtra: Generated<number>;
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  idCustomer: string;
  namespaceCode: string;
  status: Generated<Status>;
  updatedAt: Generated<Timestamp>;
}

export interface NamespaceLimit {
  active: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  idNamespace: string;
  maxOffer: Generated<number>;
  precision: Generated<number>;
  updatedAt: Generated<Timestamp>;
}

export interface NamespaceLimit2 {
  active: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  maxOffer: Generated<number>;
  namespaceId: string | null;
  precision: Generated<number>;
  updatedAt: Generated<Timestamp>;
}

export interface PaymentOrder {
  amount: number;
  createdAt: Generated<Timestamp>;
  digits: string;
  due: Timestamp;
  id: Generated<string>;
  namespaceAccountOrigin: string;
  namespaceCode: string;
  payedAt: Timestamp | null;
  status: Generated<TransactionStatus>;
}

export interface PaymentOrder2 {
  amount: number;
  code: string;
  createdAt: Generated<Timestamp>;
  due: Timestamp;
  id: Generated<string>;
  namespaceAccountTarget: string;
  namespaceCodeTarget: string;
  payedAt: Timestamp | null;
  status: Generated<PaymentOrderStatusEnum>;
  transactionId: string | null;
}

export interface Session {
  expires: Timestamp;
  id: Generated<string>;
  sessionToken: string;
  userId: string;
}

export interface Session2 {
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  infos: string | null;
  token: string;
  updatedAt: Generated<Timestamp>;
  userId: string | null;
}

export interface Transaction {
  amount: number;
  confirmedAt: Timestamp | null;
  createdAt: Generated<Timestamp>;
  details: Generated<string>;
  hash: string | null;
  headline: Generated<string>;
  id: Generated<string>;
  namespaceAccount: string | null;
  namespaceAccountOrigin: string | null;
  namespaceAccountTarget: string | null;
  namespaceCode: string;
  status: Generated<TransactionStatus>;
  type: TransactionType;
}

export interface Transaction2 {
  amount: number;
  confirmedAt: Timestamp | null;
  createdAt: Generated<Timestamp>;
  details: string;
  hash: string | null;
  headline: string;
  id: Generated<string>;
  namespaceAccountOrigin: string;
  namespaceAccountTarget: string;
  namespaceCode: string;
  status: Generated<TransactionStatusEnum>;
  type: TransactionTypeEnum;
}

export interface TransactionRecord {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  transactionId: string | null;
}

export interface User {
  created_at: Generated<Timestamp>;
  email: string;
  emailVerified: Timestamp | null;
  id: Generated<string>;
  image: string | null;
  name: string;
  password: string;
  status: Generated<Status>;
  updated_at: Generated<Timestamp>;
}

export interface User2 {
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  name: string;
  password: string;
  status: Generated<UserStatusEnum>;
  updatedAt: Generated<Timestamp>;
}

export interface UserLimit {
  active: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  idUser: string;
  maxNamespace: Generated<number>;
  updatedAt: Generated<Timestamp>;
}

export interface UserLimit2 {
  active: Generated<boolean>;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp | null;
  id: Generated<string>;
  maxNamespaces: Generated<number>;
  updatedAt: Generated<Timestamp>;
  userId: string | null;
}

export interface UserNamespace {
  createdAt: Generated<Timestamp>;
  idNamespace: string;
  idUser: string;
  updatedAt: Generated<Timestamp>;
}

export interface UserNamespacesNamespace {
  namespaceId: string;
  userId: string;
}

export interface VerificationToken {
  expires: Timestamp;
  identifier: string;
  token: string;
}

export interface DB {
  access_token: AccessToken2;
  AccessToken: AccessToken;
  account: Account2;
  Account: Account;
  customer: Customer2;
  Customer: Customer;
  namespace: Namespace2;
  Namespace: Namespace;
  namespace_limit: NamespaceLimit2;
  NamespaceAccount: NamespaceAccount;
  NamespaceLimit: NamespaceLimit;
  payment_order: PaymentOrder2;
  PaymentOrder: PaymentOrder;
  session: Session2;
  Session: Session;
  transaction: Transaction2;
  Transaction: Transaction;
  transaction_record: TransactionRecord;
  user: User2;
  User: User;
  user_limit: UserLimit2;
  user_namespaces_namespace: UserNamespacesNamespace;
  UserLimit: UserLimit;
  UserNamespace: UserNamespace;
  VerificationToken: VerificationToken;
}
